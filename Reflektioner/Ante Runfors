First day:
Downloaded git to the terminal -> struggled finding the correct website for it - but i managed after some searching.
The group chose to use GITHUB as our distributor.
Made a SSH-key and connected it to GITHUB.

-Cloned the repository and made my first commit

Second day:
Sat in groups and made up a plan, each member decided of one of the hamburgers contents.

Third day:
Git didn't work. For some reason the SSH-key wasn't correct.
Had to make a new SSH-key, made a RSA-key first, which didn't work.
After some troubleshooting I made a new SSH-key (Ed25519), which did work.
Accidentally almost uploaded the private key to Github but thankfully GITHUB didn't accept it and told me to upload the public key.

Also tried downloading git-desktop becuase that's what my group uses, but since the SSH-key wasn't correct that didn't work either. After fixing the SSH-issues I decided to keep using GIT through the terminal.

-Removed the repo (hadn't made any changes and got confused on why git wouldn't work)
-Cloned the repo (once I had fixed the SSH-issues)
-Made a new commit.

I've also found useful git-commands:
    -git commit -m "message" (adds a commit to my local repo)
    -git push (pushes the local commit to github)


Fourth day:
I've researched automatic testing in Python - realised to late that the video only talked about testing to code and not the functions :D

Fifth day (14/10-24):
I think I misunderstood the assignment, after talking to some classmates and group members I think I'll need to make automatic testing for both the code and the answer. How I should proceed now is quite unclear, but I think I'll find something out after browsing the web. I'll find out more later today.

Plans:
Look at how DBWEBB validates the code.
Search for more information online about automatic testing.

-Added quite a bit to the journal, because I forgot to do it earlier. Will start with dates now as well.

2nd commit (14/10-24):

-Found out that you need to write "git add [file]" before you write 'git commit -m "[message]"'  and that once you've done that you can write "git push" to push it to the server (github)

I've also found two books that I'll read in the future, hopefully during this course but I probably wont have enough time for that.

Books:
    https://git-scm.com/book/en/v2 - Book on how to use git
    http://www.obeythetestinggoat.com/ - Book for automatic testing (which from what I've read is really important)

15/10-24
Researched different test frameworks for python and decided to use pytest because it's supposedly simple. Couldn't figure out how to use it with the API, because I put the test file withi n the Program directory.


After some discussion with the group I changed the test-files location to the BurgerOrderer directory and tried running the script once again. The script failed so I proceeded to try some workarounds and figured out that I had used the wrong address for the localhost, trough pytest (it said that the import + output was a different type of localhost :D).  Changed the local-hosts adress and got it working.

16/10-24

Found out about a command that creates a requirements.txt for you with all of the packages that are used in a project:
-pip3 freeze -r -requirements.txt

Still confused about how I'm supposed to do these tests, just doing an assert function for the url (what I've done so far), doesn't really do much. I need to figure out how to test like the actual function of the program. Been searching on the web for different ways to do this, but haven't really been able to find anything useful. Could be because I do not understand falsk and docker enough, so I'm going to watch a couple tutorials on those parts and then go back to trying to figure out how to unit tests the programs functions. Doing a unit-test with my knowedlge would be easy if it had just been different functions, but since we're working with dictionaries (which I've never used before) and flask+docker I'm quite lost. Well we'll see if I can figure it out once I've watched the tutorials on SQLAlchemy Databases and docker containers :D

Accidentally merged my workspace with the one github (whoops), but due to this I found these commands which helped me fix the issue:

-git log #shows a log of what as been commited to git
-git log --oneline #shows every commit but each commit and it's info is on a seperate line
-git revert #which basically is an undo command (but for git)
-git revert -m 1 #m 1 = which parent branch to keep, in this case 1 becuase that's the main one
-git revert -m 1 31a1981 #31a1981 = the version that had to be reverted

After running the commands:
-git log --oneline
-git revert -m 1 31a1981

I had reverted the github back to (almost) it's original state, some parts were missing, but after talking to my groupmates they decided to commit what had been lost once again, and so we had fixed all of the issues (I made).

I chose to debug the Kitchenview function. This meant that I first had to start up the MenuStore and BurgerOrderer, because they work together. Once I had started up the different parts of the program I proceeded by putting a breakpoint on line 8 in Kitchenview's app.py and then running the built in python debugger. 

At this point the debugger was up and running, but I was not able to use it, this was because the variables had no worth. To fix this I had to open up my browser and order a hamburger in the program. Once I had done that, the options for the debugger became usable. 

18/10-24 Debugsession:

	Inside of the debugsession:
		Continue:
		Continue   runs the program like normal from the point you stop debugging.
		Step over:
		With the "Step over" function you can step over a function/part in your code. So if you are currently on line 7 in test_app.py (kitchenview) and press on the step over function you will skip the function "buy" and go to the next function, in this case @app.route. 
		If you use the "Step over" function inside of a function you will skip to the next line. So if you stand on line 8 and use the "Skip over" function, you will go over to  line 9.

		Step into:
		Step into is used to step into a function that has been called. This is  useful when you have defined functions in your project, because it lets you debug those functions even though they are defined elsewhere in the project compared to where you are debugging. 

		Step out:
		Step out is used to step out of a function that you are debugging. 

	Observing a variabel:
	To observe a variabel we have got a window on the left side of VS Codium. In this window you can see how the variable changes while going through the program. For this example I observed the variable “burgerName”, which in this case had the worth “Chicken burger” because I ordered a Chickenburger. In Kitchenview the variable never changed it’s worth, but if it would have the window would have updated and I would have been able to see that the variable burgerName would have gotten a different worth. 

	Trial & Error
		Ordering a Vegan burger with no options instead of a Chicken burger with onions:
		When I ordered a Vegan burger with no options, I could see that burgerName had the worth of ‘Vegan burger’ instead of ‘Chicken burger’, and that the variable for options was empty, which is logical because I had not chosen any options. 

While using step over I could also see that the program went past the if-statement (for options) and went to the else-statement instead. This because the If-statement checked if there were any options or not, and if there were no options it was supposed to go over to the else function. Which meant that the code worked as intended. After that I continued with the Step over function until the program had ran successfully all the way through, which it did, noticeable by the output “Order received: 1 Vegan burger

		Ordering a Deluxe Burger, but forgetting to press order:
		I could not debug the program because nothing was ordered. 

	My thoughts about debugging and the debug-session:
	Debugging in itself is pretty simple in my opinion, because it is essentially just going through each part of the code you would like to go through from line to line. The only issue I had with this session was that I did not figure out in the beginning why I could not debug, which was caused due to two reason. 

		Reason 1:
		I had put my breakpoint on line 7, which made it so that the code just ran, because it did not break within a function. 
		Reason 2:
		I had forgotten to order something in KitchenView, which meant that the program had no variables to work with, because all of them were empty and had no value. 

	Is debugging a valuable tool?
	I believe that debugging is a very valuable tool, because it can help you get better understanding of your own code and help you write better code. Without debugging I would probably have gotten stuck countless of times while writing code without managing to figure out what was actually wrong with the code I had written. 


